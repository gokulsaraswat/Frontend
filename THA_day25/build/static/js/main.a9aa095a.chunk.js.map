{"version":3,"sources":["App.js","actions/index.js","reducers/counterReducer.js","reducers/userReducer.js","reducers/index.js","store.js","index.js"],"names":["App","useSelector","state","counter","user","dispatch","useDispatch","className","type","placeholder","onChange","event","data","target","value","name","email","counterReducer","action","initialState","userReducer","newState","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uLAuCeA,MAlCf,WACgBC,aAAY,SAACC,GAAD,OAASA,EAAMC,WAAzC,IACMC,EAAOH,aAAY,SAACC,GAAD,OAASA,EAAME,QAClCC,EAAWC,cACjB,OACE,sBAAKC,UAAU,MAAf,UACE,gCACE,uCACA,+BACE,iEACA,yEACA,iHAIJ,gCACE,uCACA,uBAAOC,KAAK,OAAOC,YAAY,OAAQC,SAAU,SAACC,GAChDN,ECXC,CACHG,KAAM,WACNI,KDSoBD,EAAME,OAAOC,WACtB,uBACX,uBAAON,KAAK,OAAOC,YAAY,QAAQC,SAAU,SAACC,GAChDN,ECPC,CACHG,KAAM,YACNI,KDKqBD,EAAME,OAAOC,cAIpC,gCACE,sCACA,2CAAcV,EAAKW,KAAnB,OACA,wCAAWX,EAAKY,gBEvBTC,EAVQ,WAAuB,IAAtBf,EAAqB,uDAAb,EAAGgB,EAAU,uCACzC,MAAiB,cAAdA,EAAOV,KACCN,EAAQ,EACI,cAAdgB,EAAOV,KACLN,EAAO,EAGXA,G,cCPLiB,EAAe,CACjBJ,KAAM,GACNC,MAAO,IAeII,EAbK,WAAkC,IAAjClB,EAAgC,uDAAxBiB,EAAcD,EAAU,uCACjD,GAAiB,aAAdA,EAAOV,KAAkB,CACxB,IAAMa,EAAQ,eAAOnB,GAErB,OADAmB,EAASN,KAAOG,EAAON,KAChBS,EACL,GAAiB,cAAdH,EAAOV,KAAmB,CAC/B,IAAMa,EAAQ,eAAOnB,GAErB,OADAmB,EAASL,MAAQE,EAAON,KACjBS,EAEX,OAAOnB,GCJIoB,EALKC,YAAgB,CAChCpB,QAASc,EACTb,KAAMgB,ICHKI,EADDC,YAAYH,GCI1BI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,EAAjB,SACA,cAAC,EAAD,QAIFK,SAASC,eAAe,W","file":"static/js/main.a9aa095a.chunk.js","sourcesContent":["import './App.css';\n\nimport {incNumber,decNumber,userName,userEmail} from './actions'\nimport { useDispatch,useSelector} from 'react-redux';\n\nfunction App() {\n  const count = useSelector((state)=>state.counter);\n  const user = useSelector((state)=>state.user);\n  const dispatch = useDispatch();\n  return (\n    <div className=\"App\">\n      <div>\n        <h1>Steps</h1>\n        <ul>\n          <li>Create a user state using redux</li>\n          <li>Update user state when input is changed</li>\n          <li>Create a seperate component and display user data(Don't Pass it as Props)</li>\n        </ul>\n      </div>\n\n      <div>\n        <h1>Input</h1>\n        <input type=\"text\" placeholder=\"Name\"  onChange={(event)=>{\n          dispatch(userName(event.target.value));\n        }}></input><br></br>\n        <input type=\"text\" placeholder=\"Email\" onChange={(event) =>{\n          dispatch(userEmail(event.target.value));\n        }}></input>\n      </div>\n\n      <div>\n        <h1>Data</h1>\n        <p>Username: {user.name} </p>\n        <p>Email: {user.email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const incNumber = ()=>{\r\n    return {\r\n        type: \"increment\",\r\n    }\r\n}\r\nconst decNumber = ()=>{\r\n    return {\r\n        type: \"decrement\"\r\n    }\r\n}\r\n\r\nconst userName = (data)=>{\r\n    return {\r\n        type: \"userName\",\r\n        data: data,\r\n    }\r\n}\r\n\r\nconst userEmail = (data)=>{\r\n    return {\r\n        type: \"userEmail\",\r\n        data: data,\r\n    }\r\n}\r\n\r\nexport {incNumber, decNumber, userName, userEmail};","const counterReducer = (state = 0, action) =>{\r\n    if(action.type===\"increment\"){\r\n        return state + 1;\r\n    }else if(action.type===\"decrement\"){\r\n        return state -1;\r\n    }\r\n\r\n    return state;\r\n}\r\n\r\nexport default counterReducer;","const initialState = {\r\n    name: \"\",\r\n    email: \"\",\r\n}\r\nconst userReducer = (state = initialState, action) =>{\r\n    if(action.type===\"userName\"){\r\n        const newState = {...state};\r\n        newState.name = action.data;\r\n        return newState;\r\n    }else if(action.type===\"userEmail\"){\r\n        const newState = {...state};\r\n        newState.email = action.data;\r\n        return newState;\r\n    }\r\n    return state\r\n}\r\n\r\nexport default userReducer;","import counterReducer from \"./counterReducer\";\r\n\r\nimport {combineReducers} from \"redux\";\r\nimport userReducer from \"./userReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    counter: counterReducer,\r\n    user: userReducer\r\n})\r\n\r\nexport default rootReducer;","import rootReducer from \"./reducers\";\r\nimport {createStore} from 'redux';\r\n\r\nconst store = createStore(rootReducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './store';\n\nimport {Provider} from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}